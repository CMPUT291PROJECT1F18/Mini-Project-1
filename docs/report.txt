The design document should include 
(a) a general overview of your system with a small user guide, 
(b) a detailed design of your software with a focus on the components required to 
deliver the major functions of your application, 
(c) your testing strategy, and 
(d) your group work break-down strategy.

Overview:

mini_project_1 is a python cli application that either takes in a database or creates one. It takes
commands with parameters from the command line, validates them (using python and the database), and then querys
the sqlite database for results. This database then returns info to the python program for displaying to the user.

TODO: input user guide from readme.rst


The detailed design of your software should describe the responsibility and interface of each primary function
 or class (not secondary utility functions/classes) and the structure and relationships among them. 
Depending on the programming language being used, you may have methods, functions or classes. 

Detailed Design: TODO: wait until refactoring is done?

1. Shell

2. Common

3. Account Creation and Login

4. Rides

5. Bookings

6. Ride requests



Testing Strategy:

Testing mainly made the use of partitions. In order to test our code, our program can generate an
populate a sqlite database.Each function's inputs were divided into valid and invalid inputs
and a test cases was created for each invalid input and enough test cases were tested to cover
the valid partitions.

with the scenarios being tested,
the coverage of your test cases and
(if applicable) some statistics on the number of bugs found and the nature of those bugs.



Break-down of the work: TODO: fill our contri
  * nklapste - Nathan Klapstein
	Hours:
	Progress made:

  * rfurrer - Ryan Furrer
	Hours: 15ish hours
	Progress made:
	    main contributions were the book a member, offer ride and search rides functionality
	    also did some bug fixing

  * tlorincz- Thomas Lorincz
	Hours:
	Progress made:

Work Coordination:

We primary coordinated through Github. A organization was set up for the project and each task was
broken down into issue tickets. These tickets were assigned to members and each pull request was
associated with an issue, to measure progress, and when an issue was done the assigned
member would close the issue.

Design decisions differing from requirements: TODO: say none?