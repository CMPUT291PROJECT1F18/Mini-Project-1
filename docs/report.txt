The design document should include 
(a) a general overview of your system with a small user guide, 
(b) a detailed design of your software with a focus on the components required to 
deliver the major functions of your application, 
(c) your testing strategy, and 
(d) your group work break-down strategy. 

The general overview of the system gives a high level introduction and 
may include a diagram showing the flow of data between different components; 
this can be useful for both users and developers of your application. 

Overview:

mini_project_1 is a python cli application that either takes in a database or creates one. It takes
commands with parameters from the command line and valid coammand query a sqlite database for results.
This database then returns info to the python program for displaying to the user.


The detailed design of your software should describe the responsibility and interface of each primary function
 or class (not secondary utility functions/classes) and the structure and relationships among them. 
Depending on the programming language being used, you may have methods, functions or classes. 

Detailed Design:

1. Account Creation and Login

2. Rides

3. Bookings

4. Ride requests



The testing strategy discusses your general strategy for testing, with the scenarios being tested, 
the coverage of your test cases and (if applicable) some statistics on the number of bugs found and 
the nature of those bugs. 

Testing Strategy:

Testing mainly made the use of partitions. Each function's inputs were divided into valid and invalid
inputs and test cases were run for them.



The group work strategy must list the break-down of the work items among partners, 
both the time spent (an estimate) and the progress made by each partner, and your 
method of coordination to keep the project on track. 

Break-down of the work:
  * nklapste - Nathan Klapstein
	Hours:
	Progress made:

  * rfurrer - Ryan Furrer
	Hours:
	Progress made:

  * tlorincz- Thomas Lorincz
	Hours:
	Progress made:

Work Coordination:

We primary coordinated through Github. A orgination was set up for the project and each task was 
broken down into issue tickets. These tickets were assigned to members and work was done each pull
request was associated with an issue, to measure progress, and when an issue was done the assigned 
member would close the issue.

Design decisions differing from requirements: